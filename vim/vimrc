if !empty(system("setxkbmap -print|grep bepo"))
    source ~/.vimrc.bepo
endif

let file = expand("~/.vim/autoload/pathogen.vim")
if filereadable(file)
    execute pathogen#infect()
endif

" Leader - ( Spacebar )
let mapleader = " "

" Esc - Ctrl + L
imap <C-L> <Esc>

" Reload vimrc
map <leader>s :source ~/.vimrc<CR>

" Global settings
set nocompatible
set hlsearch
set cursorline
set title

set background=dark

set shiftwidth=4
set expandtab
set tabstop=4

set smartcase

syntax on

" Search and replace live - wait for nvim 0.2
"set inccommand=split

" Start scrolling when we are 3 lines away from margins
set scrolloff=3

" Open new split panes to right and bottom
set splitbelow
set splitright

" Auto resize Vim splits to active split
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999

" Wrap all lines of current paragraph at 80 characters
nnoremap Q gqip

" Split horizontally & vertically
nnoremap <leader>sv :vs<CR>
nnoremap <leader>sh :sp<CR>

" Resize panes
nnoremap <silent> <C-Right> :vertical resize +5<cr>
nnoremap <silent> <C-Left> :vertical resize -5<cr>
nnoremap <silent> <C-Up> :resize +5<cr>
nnoremap <silent> <C-Down> :resize -5<cr>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Quickly slect buffer
nnoremap <leader>bb :buffers<CR>:buffer<Space>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <leader>bd :bdelete<CR>

" Search and replace
" After completing a search, hit `cs` to replace the first match
" n.n.n.n. will replace the 4 next matches
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

" Save
nnoremap <leader>w :w<CR>

" Don't open a new panel on misstroke
map q: :q

" Show line numbers
highlight LineNr term=bold ctermfg=darkgray guifg=darkgray

" Toggle relative numbering, set to absolute on loss of focus or insert mode
set nu!
set rnu
function! ToggleRelativeOn()
    set rnu!
    set nu
endfunction

autocmd InsertEnter * call ToggleRelativeOn()
autocmd InsertLeave * call ToggleRelativeOn()

" Switch relative <-> absolute numbering
nnoremap <leader>t :call ToggleRelativeOn()<cr>

" Special configuration for development
filetype on
autocmd FileType .c,.cpp,.cxx,.h set cindent|set cin|set softtabstop=4|
"set colorcolumn=78
set smartindent

" Does not expand type for makefiles
autocmd FileType make setlocal noexpandtab

" Special highlighting for Doxygen
let g:load_doxygen_syntax=1

" Enable saving a file when forgot to sudo
cmap w!! w !sudo tee % >/dev/null

" Quick way to enable spell check
cmap s!! set spell spelllang=

" Use hjkl
nnoremap <Left> :echoe "Use h you NOOB!"<CR>
nnoremap <Right> :echoe "Use l you NOOB!"<CR>
nnoremap <Up> :echoe "Use k you NOOB!"<CR>
nnoremap <Down> :echoe "Use j you NOOB!"<CR>

" Stop current highlighting
nnoremap <leader>h :noh<cr>

" Clear white at the end of lines
nnoremap <leader>c :%s/\s\+$//<CR>

function! s:nice_next(cmd)
  let view = winsaveview()
  execute "normal! " . a:cmd
  if view.topline != winsaveview().topline
    normal! zz
  endif
endfunction

nnoremap <silent> n :call <SID>nice_next('n')<cr>
nnoremap <silent> N :call <SID>nice_next('N')<cr>


" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
      command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
              \ | wincmd p | diffthis
endif



" Plugins specific
filetype plugin on
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"


" NERDTree
nnoremap <leader>n :NERDTreeToggle<cr>


" CtrlP
nnoremap <leader>o :CtrlP<CR>


" vim-expand-region
vmap v <Plug>(expand_region_expand)
vmap <C_V> <Plug>(expand_region_shrink)

if has ("cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst
    set nocsverb
    " add any DB in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add DB pointed to by environement
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
endif

map <C-_> :cstag <C-R>=expand("<cword>")<CR><CR>
map g<C-]> :cs find 3 <C-R>=expand("<cword>")<CR><CR>


" vim-side-search
" How should we execute the search?
" --heading and --stats are required!
let g:side_search_prg = 'ag --word-regexp'
  \. " --ignore='*.js.map'"
  \. " --heading --stats -B 1 -A 4"

" Can use `vnew` or `new`
let g:side_search_splitter = 'vnew'

" 40% splits
let g:side_search_split_pct = 0.4

" SideSearch current word and return to original window
nnoremap <Leader>ss :SideSearch <C-r><C-w><CR> | wincmd p

" Create an shorter `SS` command
command! -complete=file -nargs=+ SS execute 'SideSearch <args>'


" ========================== nvim ============================= "
if has ('nvim')
    nnoremap <leader>st :sp term://zsh<CR>
    nnoremap <leader>vt :vsp term://zsh<CR>

    tnoremap <Esc> <C-\><C-n>

    tnoremap <A-h> <C-\><C-n><C-w>h
    tnoremap <A-j> <C-\><C-n><C-w>j
    tnoremap <A-k> <C-\><C-n><C-w>k
    tnoremap <A-l> <C-\><C-n><C-w>l
    nnoremap <A-h> <C-w>h
    nnoremap <A-j> <C-w>j
    nnoremap <A-k> <C-w>k
    nnoremap <A-l> <C-w>l

    let g:airline#extensions#virtualenv#enabled = 1
    let g:airline#extensions#branch#enabled = 1
endif
